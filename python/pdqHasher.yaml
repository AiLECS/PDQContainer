swagger: "2.0"

info:
  title: PDQ Hasher Demo
  description: Simple demo/POC of a PDQ microservice. Supports generation of PDQ hashes from uploaded files, plus searching against static lists of files in memory.
  version: "1.0"
  contact:
    name: Janis Dalins
    email: janis.dalins@afp.gov.au


paths:
  /pdq:
    get:
      summary: "Search for matches to PDQ hash (provided)"
      operationId: "app.hash_search"
      parameters:
        - name: pdq
          in: query
          type: string
          pattern: "^[a-f0-9]{64}$"
          required: true
          description: PDQ hash. If not known, upload file for search via post call
        - $ref: '#/parameters/max'
        - $ref: '#/parameters/fast'
      produces:
        - text/plain
      responses:
        200:
          description: Return classes of potential matching images
    post:
      summary: "Upload a file for search"
      operationId: "app.image_search"
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: file_to_upload
          in: formData
          description: The image file (e.g. jpg, png) to be uploaded
          type: file
          required: true
        - $ref: '#/parameters/max'
        - $ref: '#/parameters/fast'
      responses:
        200:
          description: Return classes of potential matching images
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/Result'
  /pdq/hash:
    post:
      summary: "Upload a file for hashing"
      operationId: "app.image_post"
      consumes:
        - multipart/form-data
      produces:
        - text/plain
      parameters:
        - name: file_to_upload
          in: formData
          description: The image file (e.g. jpg, png) to be uploaded
          type: file
          required: true
      responses:
        200:
          description: Return PDQ hash value of uploaded image (picture) file
          schema:
            $ref: '#/definitions/Result'

parameters:
  max:
    name: max
    in: query
    type: integer
    default: 30
    minimum: 0
    maximum: 256  #this is way too big!
    required: false
    description: Maximum hamming distance for match. Defaults to 30
  fast:
    name: fast
    in: query
    type: boolean
    default: True
    required: false
    description: Only returns if any matching images found in classes. Won't attempt confidences.

definitions:
  Result:
    type: object
    required:
      - category
    properties:
      category:
        type: string
        description: Class for matching/close matching result
        example: Ignorable
      hamming:
        type: integer
        description: Best (i.e. smallest) Hamming distance
        example: 3
      search:
        type: string
        enum: [full, incomplete]
        description: Search level made for result. If incomplete, returns first hit for each category (i.e. there may be better matches)
        example: full
      confidence:
        type: string
        enum: [high, medium, low]
        description: Confidence for match. returns High if Hamming Distance <= 30, medium <= 60, else, low.
  HashGen:
    type: object
    required:
      - hash
      - quality
    properties:
      hash:
        type: string
        description: PDQ hash value (as hex string)
        example: 331d70ccc7f3631998cc364ccb38734c99f2ce633db20ce26673939a4cf226b2
        # pattern: "^[a-f0-9]{64}$"
      quality:
        type: integer
        description: Image quality metric (max 100)
        example: 100